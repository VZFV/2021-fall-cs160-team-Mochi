// Code generated by go-swagger; DO NOT EDIT.

package user_mgmt_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"2021-fall-cs160-team-Mochi/backend/source/generated/models"
)

// GetUserV1OKCode is the HTTP code returned for type GetUserV1OK
const GetUserV1OKCode int = 200

/*GetUserV1OK Success

swagger:response getUserV1OK
*/
type GetUserV1OK struct {

	/*
	  In: Body
	*/
	Payload *models.UserObj `json:"body,omitempty"`
}

// NewGetUserV1OK creates GetUserV1OK with default headers values
func NewGetUserV1OK() *GetUserV1OK {

	return &GetUserV1OK{}
}

// WithPayload adds the payload to the get user v1 o k response
func (o *GetUserV1OK) WithPayload(payload *models.UserObj) *GetUserV1OK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user v1 o k response
func (o *GetUserV1OK) SetPayload(payload *models.UserObj) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserV1OK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserV1BadRequestCode is the HTTP code returned for type GetUserV1BadRequest
const GetUserV1BadRequestCode int = 400

/*GetUserV1BadRequest Bad Request

swagger:response getUserV1BadRequest
*/
type GetUserV1BadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewGetUserV1BadRequest creates GetUserV1BadRequest with default headers values
func NewGetUserV1BadRequest() *GetUserV1BadRequest {

	return &GetUserV1BadRequest{}
}

// WithPayload adds the payload to the get user v1 bad request response
func (o *GetUserV1BadRequest) WithPayload(payload *models.ErrResponse) *GetUserV1BadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user v1 bad request response
func (o *GetUserV1BadRequest) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserV1BadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserV1UnauthorizedCode is the HTTP code returned for type GetUserV1Unauthorized
const GetUserV1UnauthorizedCode int = 401

/*GetUserV1Unauthorized Unauthorized

swagger:response getUserV1Unauthorized
*/
type GetUserV1Unauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewGetUserV1Unauthorized creates GetUserV1Unauthorized with default headers values
func NewGetUserV1Unauthorized() *GetUserV1Unauthorized {

	return &GetUserV1Unauthorized{}
}

// WithPayload adds the payload to the get user v1 unauthorized response
func (o *GetUserV1Unauthorized) WithPayload(payload *models.ErrResponse) *GetUserV1Unauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user v1 unauthorized response
func (o *GetUserV1Unauthorized) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserV1Unauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserV1ForbiddenCode is the HTTP code returned for type GetUserV1Forbidden
const GetUserV1ForbiddenCode int = 403

/*GetUserV1Forbidden Forbidden

swagger:response getUserV1Forbidden
*/
type GetUserV1Forbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewGetUserV1Forbidden creates GetUserV1Forbidden with default headers values
func NewGetUserV1Forbidden() *GetUserV1Forbidden {

	return &GetUserV1Forbidden{}
}

// WithPayload adds the payload to the get user v1 forbidden response
func (o *GetUserV1Forbidden) WithPayload(payload *models.ErrResponse) *GetUserV1Forbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user v1 forbidden response
func (o *GetUserV1Forbidden) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserV1Forbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserV1NotFoundCode is the HTTP code returned for type GetUserV1NotFound
const GetUserV1NotFoundCode int = 404

/*GetUserV1NotFound Not Found

swagger:response getUserV1NotFound
*/
type GetUserV1NotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewGetUserV1NotFound creates GetUserV1NotFound with default headers values
func NewGetUserV1NotFound() *GetUserV1NotFound {

	return &GetUserV1NotFound{}
}

// WithPayload adds the payload to the get user v1 not found response
func (o *GetUserV1NotFound) WithPayload(payload *models.ErrResponse) *GetUserV1NotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user v1 not found response
func (o *GetUserV1NotFound) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserV1NotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserV1ConflictCode is the HTTP code returned for type GetUserV1Conflict
const GetUserV1ConflictCode int = 409

/*GetUserV1Conflict Conflict

swagger:response getUserV1Conflict
*/
type GetUserV1Conflict struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewGetUserV1Conflict creates GetUserV1Conflict with default headers values
func NewGetUserV1Conflict() *GetUserV1Conflict {

	return &GetUserV1Conflict{}
}

// WithPayload adds the payload to the get user v1 conflict response
func (o *GetUserV1Conflict) WithPayload(payload *models.ErrResponse) *GetUserV1Conflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user v1 conflict response
func (o *GetUserV1Conflict) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserV1Conflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserV1InternalServerErrorCode is the HTTP code returned for type GetUserV1InternalServerError
const GetUserV1InternalServerErrorCode int = 500

/*GetUserV1InternalServerError Internal Server Error

swagger:response getUserV1InternalServerError
*/
type GetUserV1InternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewGetUserV1InternalServerError creates GetUserV1InternalServerError with default headers values
func NewGetUserV1InternalServerError() *GetUserV1InternalServerError {

	return &GetUserV1InternalServerError{}
}

// WithPayload adds the payload to the get user v1 internal server error response
func (o *GetUserV1InternalServerError) WithPayload(payload *models.ErrResponse) *GetUserV1InternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user v1 internal server error response
func (o *GetUserV1InternalServerError) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserV1InternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
