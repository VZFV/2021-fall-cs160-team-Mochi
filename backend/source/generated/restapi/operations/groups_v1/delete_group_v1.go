// Code generated by go-swagger; DO NOT EDIT.

package groups_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteGroupV1HandlerFunc turns a function with the right signature into a delete group v1 handler
type DeleteGroupV1HandlerFunc func(DeleteGroupV1Params) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteGroupV1HandlerFunc) Handle(params DeleteGroupV1Params) middleware.Responder {
	return fn(params)
}

// DeleteGroupV1Handler interface for that can handle valid delete group v1 params
type DeleteGroupV1Handler interface {
	Handle(DeleteGroupV1Params) middleware.Responder
}

// NewDeleteGroupV1 creates a new http.Handler for the delete group v1 operation
func NewDeleteGroupV1(ctx *middleware.Context, handler DeleteGroupV1Handler) *DeleteGroupV1 {
	return &DeleteGroupV1{Context: ctx, Handler: handler}
}

/* DeleteGroupV1 swagger:route DELETE /v1/groups/{group_id} groupsV1 deleteGroupV1

delete a group

*/
type DeleteGroupV1 struct {
	Context *middleware.Context
	Handler DeleteGroupV1Handler
}

func (o *DeleteGroupV1) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteGroupV1Params()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
