// Code generated by go-swagger; DO NOT EDIT.

package groups_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"2021-fall-cs160-team-Mochi/backend/source/generated/models"
)

// GetGroupsV1OKCode is the HTTP code returned for type GetGroupsV1OK
const GetGroupsV1OKCode int = 200

/*GetGroupsV1OK Success

swagger:response getGroupsV1OK
*/
type GetGroupsV1OK struct {

	/*
	  In: Body
	*/
	Payload models.GetAllGroupsObject `json:"body,omitempty"`
}

// NewGetGroupsV1OK creates GetGroupsV1OK with default headers values
func NewGetGroupsV1OK() *GetGroupsV1OK {

	return &GetGroupsV1OK{}
}

// WithPayload adds the payload to the get groups v1 o k response
func (o *GetGroupsV1OK) WithPayload(payload models.GetAllGroupsObject) *GetGroupsV1OK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get groups v1 o k response
func (o *GetGroupsV1OK) SetPayload(payload models.GetAllGroupsObject) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGroupsV1OK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.GetAllGroupsObject{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetGroupsV1BadRequestCode is the HTTP code returned for type GetGroupsV1BadRequest
const GetGroupsV1BadRequestCode int = 400

/*GetGroupsV1BadRequest Bad Request

swagger:response getGroupsV1BadRequest
*/
type GetGroupsV1BadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewGetGroupsV1BadRequest creates GetGroupsV1BadRequest with default headers values
func NewGetGroupsV1BadRequest() *GetGroupsV1BadRequest {

	return &GetGroupsV1BadRequest{}
}

// WithPayload adds the payload to the get groups v1 bad request response
func (o *GetGroupsV1BadRequest) WithPayload(payload *models.ErrResponse) *GetGroupsV1BadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get groups v1 bad request response
func (o *GetGroupsV1BadRequest) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGroupsV1BadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetGroupsV1UnauthorizedCode is the HTTP code returned for type GetGroupsV1Unauthorized
const GetGroupsV1UnauthorizedCode int = 401

/*GetGroupsV1Unauthorized Unauthorized

swagger:response getGroupsV1Unauthorized
*/
type GetGroupsV1Unauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewGetGroupsV1Unauthorized creates GetGroupsV1Unauthorized with default headers values
func NewGetGroupsV1Unauthorized() *GetGroupsV1Unauthorized {

	return &GetGroupsV1Unauthorized{}
}

// WithPayload adds the payload to the get groups v1 unauthorized response
func (o *GetGroupsV1Unauthorized) WithPayload(payload *models.ErrResponse) *GetGroupsV1Unauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get groups v1 unauthorized response
func (o *GetGroupsV1Unauthorized) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGroupsV1Unauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetGroupsV1ForbiddenCode is the HTTP code returned for type GetGroupsV1Forbidden
const GetGroupsV1ForbiddenCode int = 403

/*GetGroupsV1Forbidden Forbidden

swagger:response getGroupsV1Forbidden
*/
type GetGroupsV1Forbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewGetGroupsV1Forbidden creates GetGroupsV1Forbidden with default headers values
func NewGetGroupsV1Forbidden() *GetGroupsV1Forbidden {

	return &GetGroupsV1Forbidden{}
}

// WithPayload adds the payload to the get groups v1 forbidden response
func (o *GetGroupsV1Forbidden) WithPayload(payload *models.ErrResponse) *GetGroupsV1Forbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get groups v1 forbidden response
func (o *GetGroupsV1Forbidden) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGroupsV1Forbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetGroupsV1NotFoundCode is the HTTP code returned for type GetGroupsV1NotFound
const GetGroupsV1NotFoundCode int = 404

/*GetGroupsV1NotFound Not Found

swagger:response getGroupsV1NotFound
*/
type GetGroupsV1NotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewGetGroupsV1NotFound creates GetGroupsV1NotFound with default headers values
func NewGetGroupsV1NotFound() *GetGroupsV1NotFound {

	return &GetGroupsV1NotFound{}
}

// WithPayload adds the payload to the get groups v1 not found response
func (o *GetGroupsV1NotFound) WithPayload(payload *models.ErrResponse) *GetGroupsV1NotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get groups v1 not found response
func (o *GetGroupsV1NotFound) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGroupsV1NotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetGroupsV1ConflictCode is the HTTP code returned for type GetGroupsV1Conflict
const GetGroupsV1ConflictCode int = 409

/*GetGroupsV1Conflict Conflict

swagger:response getGroupsV1Conflict
*/
type GetGroupsV1Conflict struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewGetGroupsV1Conflict creates GetGroupsV1Conflict with default headers values
func NewGetGroupsV1Conflict() *GetGroupsV1Conflict {

	return &GetGroupsV1Conflict{}
}

// WithPayload adds the payload to the get groups v1 conflict response
func (o *GetGroupsV1Conflict) WithPayload(payload *models.ErrResponse) *GetGroupsV1Conflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get groups v1 conflict response
func (o *GetGroupsV1Conflict) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGroupsV1Conflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetGroupsV1InternalServerErrorCode is the HTTP code returned for type GetGroupsV1InternalServerError
const GetGroupsV1InternalServerErrorCode int = 500

/*GetGroupsV1InternalServerError Internal Server Error

swagger:response getGroupsV1InternalServerError
*/
type GetGroupsV1InternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewGetGroupsV1InternalServerError creates GetGroupsV1InternalServerError with default headers values
func NewGetGroupsV1InternalServerError() *GetGroupsV1InternalServerError {

	return &GetGroupsV1InternalServerError{}
}

// WithPayload adds the payload to the get groups v1 internal server error response
func (o *GetGroupsV1InternalServerError) WithPayload(payload *models.ErrResponse) *GetGroupsV1InternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get groups v1 internal server error response
func (o *GetGroupsV1InternalServerError) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGroupsV1InternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
