// Code generated by go-swagger; DO NOT EDIT.

package notes_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"2021-fall-cs160-team-Mochi/backend/source/generated/models"
)

// DeleteNoteOKCode is the HTTP code returned for type DeleteNoteOK
const DeleteNoteOKCode int = 200

/*DeleteNoteOK Success

swagger:response deleteNoteOK
*/
type DeleteNoteOK struct {

	/*
	  In: Body
	*/
	Payload *models.NoteResponse `json:"body,omitempty"`
}

// NewDeleteNoteOK creates DeleteNoteOK with default headers values
func NewDeleteNoteOK() *DeleteNoteOK {

	return &DeleteNoteOK{}
}

// WithPayload adds the payload to the delete note o k response
func (o *DeleteNoteOK) WithPayload(payload *models.NoteResponse) *DeleteNoteOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete note o k response
func (o *DeleteNoteOK) SetPayload(payload *models.NoteResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteNoteOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteNoteBadRequestCode is the HTTP code returned for type DeleteNoteBadRequest
const DeleteNoteBadRequestCode int = 400

/*DeleteNoteBadRequest Bad Request

swagger:response deleteNoteBadRequest
*/
type DeleteNoteBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewDeleteNoteBadRequest creates DeleteNoteBadRequest with default headers values
func NewDeleteNoteBadRequest() *DeleteNoteBadRequest {

	return &DeleteNoteBadRequest{}
}

// WithPayload adds the payload to the delete note bad request response
func (o *DeleteNoteBadRequest) WithPayload(payload *models.ErrResponse) *DeleteNoteBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete note bad request response
func (o *DeleteNoteBadRequest) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteNoteBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteNoteUnauthorizedCode is the HTTP code returned for type DeleteNoteUnauthorized
const DeleteNoteUnauthorizedCode int = 401

/*DeleteNoteUnauthorized Unauthorized

swagger:response deleteNoteUnauthorized
*/
type DeleteNoteUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewDeleteNoteUnauthorized creates DeleteNoteUnauthorized with default headers values
func NewDeleteNoteUnauthorized() *DeleteNoteUnauthorized {

	return &DeleteNoteUnauthorized{}
}

// WithPayload adds the payload to the delete note unauthorized response
func (o *DeleteNoteUnauthorized) WithPayload(payload *models.ErrResponse) *DeleteNoteUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete note unauthorized response
func (o *DeleteNoteUnauthorized) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteNoteUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteNoteForbiddenCode is the HTTP code returned for type DeleteNoteForbidden
const DeleteNoteForbiddenCode int = 403

/*DeleteNoteForbidden Forbidden

swagger:response deleteNoteForbidden
*/
type DeleteNoteForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewDeleteNoteForbidden creates DeleteNoteForbidden with default headers values
func NewDeleteNoteForbidden() *DeleteNoteForbidden {

	return &DeleteNoteForbidden{}
}

// WithPayload adds the payload to the delete note forbidden response
func (o *DeleteNoteForbidden) WithPayload(payload *models.ErrResponse) *DeleteNoteForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete note forbidden response
func (o *DeleteNoteForbidden) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteNoteForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteNoteNotFoundCode is the HTTP code returned for type DeleteNoteNotFound
const DeleteNoteNotFoundCode int = 404

/*DeleteNoteNotFound Not Found

swagger:response deleteNoteNotFound
*/
type DeleteNoteNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewDeleteNoteNotFound creates DeleteNoteNotFound with default headers values
func NewDeleteNoteNotFound() *DeleteNoteNotFound {

	return &DeleteNoteNotFound{}
}

// WithPayload adds the payload to the delete note not found response
func (o *DeleteNoteNotFound) WithPayload(payload *models.ErrResponse) *DeleteNoteNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete note not found response
func (o *DeleteNoteNotFound) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteNoteNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteNoteConflictCode is the HTTP code returned for type DeleteNoteConflict
const DeleteNoteConflictCode int = 409

/*DeleteNoteConflict Conflict

swagger:response deleteNoteConflict
*/
type DeleteNoteConflict struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewDeleteNoteConflict creates DeleteNoteConflict with default headers values
func NewDeleteNoteConflict() *DeleteNoteConflict {

	return &DeleteNoteConflict{}
}

// WithPayload adds the payload to the delete note conflict response
func (o *DeleteNoteConflict) WithPayload(payload *models.ErrResponse) *DeleteNoteConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete note conflict response
func (o *DeleteNoteConflict) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteNoteConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteNoteInternalServerErrorCode is the HTTP code returned for type DeleteNoteInternalServerError
const DeleteNoteInternalServerErrorCode int = 500

/*DeleteNoteInternalServerError Internal Server Error

swagger:response deleteNoteInternalServerError
*/
type DeleteNoteInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewDeleteNoteInternalServerError creates DeleteNoteInternalServerError with default headers values
func NewDeleteNoteInternalServerError() *DeleteNoteInternalServerError {

	return &DeleteNoteInternalServerError{}
}

// WithPayload adds the payload to the delete note internal server error response
func (o *DeleteNoteInternalServerError) WithPayload(payload *models.ErrResponse) *DeleteNoteInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete note internal server error response
func (o *DeleteNoteInternalServerError) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteNoteInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
