// Code generated by go-swagger; DO NOT EDIT.

package notes_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AddNoteMembersV1HandlerFunc turns a function with the right signature into a add note members v1 handler
type AddNoteMembersV1HandlerFunc func(AddNoteMembersV1Params) middleware.Responder

// Handle executing the request and returning a response
func (fn AddNoteMembersV1HandlerFunc) Handle(params AddNoteMembersV1Params) middleware.Responder {
	return fn(params)
}

// AddNoteMembersV1Handler interface for that can handle valid add note members v1 params
type AddNoteMembersV1Handler interface {
	Handle(AddNoteMembersV1Params) middleware.Responder
}

// NewAddNoteMembersV1 creates a new http.Handler for the add note members v1 operation
func NewAddNoteMembersV1(ctx *middleware.Context, handler AddNoteMembersV1Handler) *AddNoteMembersV1 {
	return &AddNoteMembersV1{Context: ctx, Handler: handler}
}

/* AddNoteMembersV1 swagger:route POST /v1/notes/{id}/members notesV1 addNoteMembersV1

add members of notes

add members of notes

*/
type AddNoteMembersV1 struct {
	Context *middleware.Context
	Handler AddNoteMembersV1Handler
}

func (o *AddNoteMembersV1) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAddNoteMembersV1Params()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
