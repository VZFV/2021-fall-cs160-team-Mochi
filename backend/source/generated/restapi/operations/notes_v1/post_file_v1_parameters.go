// Code generated by go-swagger; DO NOT EDIT.

package notes_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"mime/multipart"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PostFileV1MaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var PostFileV1MaxParseMemory int64 = 32 << 20

// NewPostFileV1Params creates a new PostFileV1Params object
//
// There are no default values defined in the spec.
func NewPostFileV1Params() PostFileV1Params {

	return PostFileV1Params{}
}

// PostFileV1Params contains all the bound params for the post file v1 operation
// typically these are obtained from a http.Request
//
// swagger:parameters postFileV1
type PostFileV1Params struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Bearer token based Authorization
	  Required: true
	  In: header
	*/
	Authorization string
	/*note file
	  Required: true
	  In: formData
	*/
	NoteFile io.ReadCloser
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostFileV1Params() beforehand.
func (o *PostFileV1Params) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(PostFileV1MaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}

	if err := o.bindAuthorization(r.Header[http.CanonicalHeaderKey("Authorization")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	noteFile, noteFileHeader, err := r.FormFile("noteFile")
	if err != nil {
		res = append(res, errors.New(400, "reading file %q failed: %v", "noteFile", err))
	} else if err := o.bindNoteFile(noteFile, noteFileHeader); err != nil {
		// Required: true
		res = append(res, err)
	} else {
		o.NoteFile = &runtime.File{Data: noteFile, Header: noteFileHeader}
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAuthorization binds and validates parameter Authorization from header.
func (o *PostFileV1Params) bindAuthorization(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("Authorization", "header", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("Authorization", "header", raw); err != nil {
		return err
	}
	o.Authorization = raw

	return nil
}

// bindNoteFile binds file parameter NoteFile.
//
// The only supported validations on files are MinLength and MaxLength
func (o *PostFileV1Params) bindNoteFile(file multipart.File, header *multipart.FileHeader) error {
	return nil
}
