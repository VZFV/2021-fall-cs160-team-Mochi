// Code generated by go-swagger; DO NOT EDIT.

package notes_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewFindNotesByTagsParams creates a new FindNotesByTagsParams object
// with the default values initialized.
func NewFindNotesByTagsParams() FindNotesByTagsParams {

	var (
		// initialize parameters with default values

		limitDefault  = int64(20)
		offsetDefault = int64(0)

		updatedAtDefault = bool(true)
	)

	return FindNotesByTagsParams{
		Limit: &limitDefault,

		Offset: &offsetDefault,

		UpdatedAt: &updatedAtDefault,
	}
}

// FindNotesByTagsParams contains all the bound params for the find notes by tags operation
// typically these are obtained from a http.Request
//
// swagger:parameters findNotesByTags
type FindNotesByTagsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Bearer token based Authorization
	  Required: true
	  In: header
	*/
	Authorization string
	/*limit of files
	  In: query
	  Default: 20
	*/
	Limit *int64
	/*offset of files
	  In: query
	  Default: 0
	*/
	Offset *int64
	/*tags to filter by
	  Required: true
	  In: path
	*/
	Tags string
	/*updated at
	  In: query
	  Default: true
	*/
	UpdatedAt *bool
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewFindNotesByTagsParams() beforehand.
func (o *FindNotesByTagsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if err := o.bindAuthorization(r.Header[http.CanonicalHeaderKey("Authorization")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	rTags, rhkTags, _ := route.Params.GetOK("tags")
	if err := o.bindTags(rTags, rhkTags, route.Formats); err != nil {
		res = append(res, err)
	}

	qUpdatedAt, qhkUpdatedAt, _ := qs.GetOK("updated_at")
	if err := o.bindUpdatedAt(qUpdatedAt, qhkUpdatedAt, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAuthorization binds and validates parameter Authorization from header.
func (o *FindNotesByTagsParams) bindAuthorization(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("Authorization", "header", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("Authorization", "header", raw); err != nil {
		return err
	}
	o.Authorization = raw

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *FindNotesByTagsParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewFindNotesByTagsParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *FindNotesByTagsParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewFindNotesByTagsParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "int64", raw)
	}
	o.Offset = &value

	return nil
}

// bindTags binds and validates parameter Tags from path.
func (o *FindNotesByTagsParams) bindTags(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.Tags = raw

	return nil
}

// bindUpdatedAt binds and validates parameter UpdatedAt from query.
func (o *FindNotesByTagsParams) bindUpdatedAt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewFindNotesByTagsParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("updated_at", "query", "bool", raw)
	}
	o.UpdatedAt = &value

	return nil
}
