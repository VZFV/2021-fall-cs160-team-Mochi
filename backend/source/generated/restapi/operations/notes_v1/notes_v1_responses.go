// Code generated by go-swagger; DO NOT EDIT.

package notes_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"2021-fall-cs160-team-Mochi/backend/source/generated/models"
)

// NotesV1OKCode is the HTTP code returned for type NotesV1OK
const NotesV1OKCode int = 200

/*NotesV1OK Success

swagger:response notesV1OK
*/
type NotesV1OK struct {

	/*
	  In: Body
	*/
	Payload *models.NoteResponse `json:"body,omitempty"`
}

// NewNotesV1OK creates NotesV1OK with default headers values
func NewNotesV1OK() *NotesV1OK {

	return &NotesV1OK{}
}

// WithPayload adds the payload to the notes v1 o k response
func (o *NotesV1OK) WithPayload(payload *models.NoteResponse) *NotesV1OK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the notes v1 o k response
func (o *NotesV1OK) SetPayload(payload *models.NoteResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NotesV1OK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// NotesV1BadRequestCode is the HTTP code returned for type NotesV1BadRequest
const NotesV1BadRequestCode int = 400

/*NotesV1BadRequest Bad Request

swagger:response notesV1BadRequest
*/
type NotesV1BadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewNotesV1BadRequest creates NotesV1BadRequest with default headers values
func NewNotesV1BadRequest() *NotesV1BadRequest {

	return &NotesV1BadRequest{}
}

// WithPayload adds the payload to the notes v1 bad request response
func (o *NotesV1BadRequest) WithPayload(payload *models.ErrResponse) *NotesV1BadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the notes v1 bad request response
func (o *NotesV1BadRequest) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NotesV1BadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// NotesV1UnauthorizedCode is the HTTP code returned for type NotesV1Unauthorized
const NotesV1UnauthorizedCode int = 401

/*NotesV1Unauthorized Unauthorized

swagger:response notesV1Unauthorized
*/
type NotesV1Unauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewNotesV1Unauthorized creates NotesV1Unauthorized with default headers values
func NewNotesV1Unauthorized() *NotesV1Unauthorized {

	return &NotesV1Unauthorized{}
}

// WithPayload adds the payload to the notes v1 unauthorized response
func (o *NotesV1Unauthorized) WithPayload(payload *models.ErrResponse) *NotesV1Unauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the notes v1 unauthorized response
func (o *NotesV1Unauthorized) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NotesV1Unauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// NotesV1ForbiddenCode is the HTTP code returned for type NotesV1Forbidden
const NotesV1ForbiddenCode int = 403

/*NotesV1Forbidden Forbidden

swagger:response notesV1Forbidden
*/
type NotesV1Forbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewNotesV1Forbidden creates NotesV1Forbidden with default headers values
func NewNotesV1Forbidden() *NotesV1Forbidden {

	return &NotesV1Forbidden{}
}

// WithPayload adds the payload to the notes v1 forbidden response
func (o *NotesV1Forbidden) WithPayload(payload *models.ErrResponse) *NotesV1Forbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the notes v1 forbidden response
func (o *NotesV1Forbidden) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NotesV1Forbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// NotesV1NotFoundCode is the HTTP code returned for type NotesV1NotFound
const NotesV1NotFoundCode int = 404

/*NotesV1NotFound Not Found

swagger:response notesV1NotFound
*/
type NotesV1NotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewNotesV1NotFound creates NotesV1NotFound with default headers values
func NewNotesV1NotFound() *NotesV1NotFound {

	return &NotesV1NotFound{}
}

// WithPayload adds the payload to the notes v1 not found response
func (o *NotesV1NotFound) WithPayload(payload *models.ErrResponse) *NotesV1NotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the notes v1 not found response
func (o *NotesV1NotFound) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NotesV1NotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// NotesV1ConflictCode is the HTTP code returned for type NotesV1Conflict
const NotesV1ConflictCode int = 409

/*NotesV1Conflict Conflict

swagger:response notesV1Conflict
*/
type NotesV1Conflict struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewNotesV1Conflict creates NotesV1Conflict with default headers values
func NewNotesV1Conflict() *NotesV1Conflict {

	return &NotesV1Conflict{}
}

// WithPayload adds the payload to the notes v1 conflict response
func (o *NotesV1Conflict) WithPayload(payload *models.ErrResponse) *NotesV1Conflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the notes v1 conflict response
func (o *NotesV1Conflict) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NotesV1Conflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// NotesV1InternalServerErrorCode is the HTTP code returned for type NotesV1InternalServerError
const NotesV1InternalServerErrorCode int = 500

/*NotesV1InternalServerError Internal Server Error

swagger:response notesV1InternalServerError
*/
type NotesV1InternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewNotesV1InternalServerError creates NotesV1InternalServerError with default headers values
func NewNotesV1InternalServerError() *NotesV1InternalServerError {

	return &NotesV1InternalServerError{}
}

// WithPayload adds the payload to the notes v1 internal server error response
func (o *NotesV1InternalServerError) WithPayload(payload *models.ErrResponse) *NotesV1InternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the notes v1 internal server error response
func (o *NotesV1InternalServerError) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NotesV1InternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
