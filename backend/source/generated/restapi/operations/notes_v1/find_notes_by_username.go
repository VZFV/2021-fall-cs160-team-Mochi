// Code generated by go-swagger; DO NOT EDIT.

package notes_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// FindNotesByUsernameHandlerFunc turns a function with the right signature into a find notes by username handler
type FindNotesByUsernameHandlerFunc func(FindNotesByUsernameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FindNotesByUsernameHandlerFunc) Handle(params FindNotesByUsernameParams) middleware.Responder {
	return fn(params)
}

// FindNotesByUsernameHandler interface for that can handle valid find notes by username params
type FindNotesByUsernameHandler interface {
	Handle(FindNotesByUsernameParams) middleware.Responder
}

// NewFindNotesByUsername creates a new http.Handler for the find notes by username operation
func NewFindNotesByUsername(ctx *middleware.Context, handler FindNotesByUsernameHandler) *FindNotesByUsername {
	return &FindNotesByUsername{Context: ctx, Handler: handler}
}

/* FindNotesByUsername swagger:route GET /v1/notes/username notesV1 findNotesByUsername

find notes by username

one username can be provided to search

*/
type FindNotesByUsername struct {
	Context *middleware.Context
	Handler FindNotesByUsernameHandler
}

func (o *FindNotesByUsername) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewFindNotesByUsernameParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
