// Code generated by go-swagger; DO NOT EDIT.

package notes_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"2021-fall-cs160-team-Mochi/backend/source/generated/models"
)

// UploadNoteV1OKCode is the HTTP code returned for type UploadNoteV1OK
const UploadNoteV1OKCode int = 200

/*UploadNoteV1OK Success

swagger:response uploadNoteV1OK
*/
type UploadNoteV1OK struct {

	/*
	  In: Body
	*/
	Payload *models.NoteResponse `json:"body,omitempty"`
}

// NewUploadNoteV1OK creates UploadNoteV1OK with default headers values
func NewUploadNoteV1OK() *UploadNoteV1OK {

	return &UploadNoteV1OK{}
}

// WithPayload adds the payload to the upload note v1 o k response
func (o *UploadNoteV1OK) WithPayload(payload *models.NoteResponse) *UploadNoteV1OK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload note v1 o k response
func (o *UploadNoteV1OK) SetPayload(payload *models.NoteResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadNoteV1OK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UploadNoteV1BadRequestCode is the HTTP code returned for type UploadNoteV1BadRequest
const UploadNoteV1BadRequestCode int = 400

/*UploadNoteV1BadRequest Bad Request

swagger:response uploadNoteV1BadRequest
*/
type UploadNoteV1BadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewUploadNoteV1BadRequest creates UploadNoteV1BadRequest with default headers values
func NewUploadNoteV1BadRequest() *UploadNoteV1BadRequest {

	return &UploadNoteV1BadRequest{}
}

// WithPayload adds the payload to the upload note v1 bad request response
func (o *UploadNoteV1BadRequest) WithPayload(payload *models.ErrResponse) *UploadNoteV1BadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload note v1 bad request response
func (o *UploadNoteV1BadRequest) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadNoteV1BadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UploadNoteV1UnauthorizedCode is the HTTP code returned for type UploadNoteV1Unauthorized
const UploadNoteV1UnauthorizedCode int = 401

/*UploadNoteV1Unauthorized Unauthorized

swagger:response uploadNoteV1Unauthorized
*/
type UploadNoteV1Unauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewUploadNoteV1Unauthorized creates UploadNoteV1Unauthorized with default headers values
func NewUploadNoteV1Unauthorized() *UploadNoteV1Unauthorized {

	return &UploadNoteV1Unauthorized{}
}

// WithPayload adds the payload to the upload note v1 unauthorized response
func (o *UploadNoteV1Unauthorized) WithPayload(payload *models.ErrResponse) *UploadNoteV1Unauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload note v1 unauthorized response
func (o *UploadNoteV1Unauthorized) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadNoteV1Unauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UploadNoteV1ForbiddenCode is the HTTP code returned for type UploadNoteV1Forbidden
const UploadNoteV1ForbiddenCode int = 403

/*UploadNoteV1Forbidden Forbidden

swagger:response uploadNoteV1Forbidden
*/
type UploadNoteV1Forbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewUploadNoteV1Forbidden creates UploadNoteV1Forbidden with default headers values
func NewUploadNoteV1Forbidden() *UploadNoteV1Forbidden {

	return &UploadNoteV1Forbidden{}
}

// WithPayload adds the payload to the upload note v1 forbidden response
func (o *UploadNoteV1Forbidden) WithPayload(payload *models.ErrResponse) *UploadNoteV1Forbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload note v1 forbidden response
func (o *UploadNoteV1Forbidden) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadNoteV1Forbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UploadNoteV1NotFoundCode is the HTTP code returned for type UploadNoteV1NotFound
const UploadNoteV1NotFoundCode int = 404

/*UploadNoteV1NotFound Not Found

swagger:response uploadNoteV1NotFound
*/
type UploadNoteV1NotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewUploadNoteV1NotFound creates UploadNoteV1NotFound with default headers values
func NewUploadNoteV1NotFound() *UploadNoteV1NotFound {

	return &UploadNoteV1NotFound{}
}

// WithPayload adds the payload to the upload note v1 not found response
func (o *UploadNoteV1NotFound) WithPayload(payload *models.ErrResponse) *UploadNoteV1NotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload note v1 not found response
func (o *UploadNoteV1NotFound) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadNoteV1NotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UploadNoteV1ConflictCode is the HTTP code returned for type UploadNoteV1Conflict
const UploadNoteV1ConflictCode int = 409

/*UploadNoteV1Conflict Conflict

swagger:response uploadNoteV1Conflict
*/
type UploadNoteV1Conflict struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewUploadNoteV1Conflict creates UploadNoteV1Conflict with default headers values
func NewUploadNoteV1Conflict() *UploadNoteV1Conflict {

	return &UploadNoteV1Conflict{}
}

// WithPayload adds the payload to the upload note v1 conflict response
func (o *UploadNoteV1Conflict) WithPayload(payload *models.ErrResponse) *UploadNoteV1Conflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload note v1 conflict response
func (o *UploadNoteV1Conflict) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadNoteV1Conflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UploadNoteV1InternalServerErrorCode is the HTTP code returned for type UploadNoteV1InternalServerError
const UploadNoteV1InternalServerErrorCode int = 500

/*UploadNoteV1InternalServerError Internal Server Error

swagger:response uploadNoteV1InternalServerError
*/
type UploadNoteV1InternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewUploadNoteV1InternalServerError creates UploadNoteV1InternalServerError with default headers values
func NewUploadNoteV1InternalServerError() *UploadNoteV1InternalServerError {

	return &UploadNoteV1InternalServerError{}
}

// WithPayload adds the payload to the upload note v1 internal server error response
func (o *UploadNoteV1InternalServerError) WithPayload(payload *models.ErrResponse) *UploadNoteV1InternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload note v1 internal server error response
func (o *UploadNoteV1InternalServerError) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadNoteV1InternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
