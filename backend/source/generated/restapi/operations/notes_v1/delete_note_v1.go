// Code generated by go-swagger; DO NOT EDIT.

package notes_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteNoteV1HandlerFunc turns a function with the right signature into a delete note v1 handler
type DeleteNoteV1HandlerFunc func(DeleteNoteV1Params) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteNoteV1HandlerFunc) Handle(params DeleteNoteV1Params) middleware.Responder {
	return fn(params)
}

// DeleteNoteV1Handler interface for that can handle valid delete note v1 params
type DeleteNoteV1Handler interface {
	Handle(DeleteNoteV1Params) middleware.Responder
}

// NewDeleteNoteV1 creates a new http.Handler for the delete note v1 operation
func NewDeleteNoteV1(ctx *middleware.Context, handler DeleteNoteV1Handler) *DeleteNoteV1 {
	return &DeleteNoteV1{Context: ctx, Handler: handler}
}

/* DeleteNoteV1 swagger:route DELETE /v1/notes/{id} notesV1 deleteNoteV1

delete note

user delete note by id

*/
type DeleteNoteV1 struct {
	Context *middleware.Context
	Handler DeleteNoteV1Handler
}

func (o *DeleteNoteV1) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteNoteV1Params()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
