// Code generated by go-swagger; DO NOT EDIT.

package notes_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"2021-fall-cs160-team-Mochi/backend/source/generated/models"
)

// PostFileV1OKCode is the HTTP code returned for type PostFileV1OK
const PostFileV1OKCode int = 200

/*PostFileV1OK Success

swagger:response postFileV1OK
*/
type PostFileV1OK struct {

	/*
	  In: Body
	*/
	Payload *models.PostFileResponse `json:"body,omitempty"`
}

// NewPostFileV1OK creates PostFileV1OK with default headers values
func NewPostFileV1OK() *PostFileV1OK {

	return &PostFileV1OK{}
}

// WithPayload adds the payload to the post file v1 o k response
func (o *PostFileV1OK) WithPayload(payload *models.PostFileResponse) *PostFileV1OK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post file v1 o k response
func (o *PostFileV1OK) SetPayload(payload *models.PostFileResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostFileV1OK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostFileV1BadRequestCode is the HTTP code returned for type PostFileV1BadRequest
const PostFileV1BadRequestCode int = 400

/*PostFileV1BadRequest Bad Request

swagger:response postFileV1BadRequest
*/
type PostFileV1BadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewPostFileV1BadRequest creates PostFileV1BadRequest with default headers values
func NewPostFileV1BadRequest() *PostFileV1BadRequest {

	return &PostFileV1BadRequest{}
}

// WithPayload adds the payload to the post file v1 bad request response
func (o *PostFileV1BadRequest) WithPayload(payload *models.ErrResponse) *PostFileV1BadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post file v1 bad request response
func (o *PostFileV1BadRequest) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostFileV1BadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostFileV1UnauthorizedCode is the HTTP code returned for type PostFileV1Unauthorized
const PostFileV1UnauthorizedCode int = 401

/*PostFileV1Unauthorized Unauthorized

swagger:response postFileV1Unauthorized
*/
type PostFileV1Unauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewPostFileV1Unauthorized creates PostFileV1Unauthorized with default headers values
func NewPostFileV1Unauthorized() *PostFileV1Unauthorized {

	return &PostFileV1Unauthorized{}
}

// WithPayload adds the payload to the post file v1 unauthorized response
func (o *PostFileV1Unauthorized) WithPayload(payload *models.ErrResponse) *PostFileV1Unauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post file v1 unauthorized response
func (o *PostFileV1Unauthorized) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostFileV1Unauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostFileV1ForbiddenCode is the HTTP code returned for type PostFileV1Forbidden
const PostFileV1ForbiddenCode int = 403

/*PostFileV1Forbidden Forbidden

swagger:response postFileV1Forbidden
*/
type PostFileV1Forbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewPostFileV1Forbidden creates PostFileV1Forbidden with default headers values
func NewPostFileV1Forbidden() *PostFileV1Forbidden {

	return &PostFileV1Forbidden{}
}

// WithPayload adds the payload to the post file v1 forbidden response
func (o *PostFileV1Forbidden) WithPayload(payload *models.ErrResponse) *PostFileV1Forbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post file v1 forbidden response
func (o *PostFileV1Forbidden) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostFileV1Forbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostFileV1NotFoundCode is the HTTP code returned for type PostFileV1NotFound
const PostFileV1NotFoundCode int = 404

/*PostFileV1NotFound Not Found

swagger:response postFileV1NotFound
*/
type PostFileV1NotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewPostFileV1NotFound creates PostFileV1NotFound with default headers values
func NewPostFileV1NotFound() *PostFileV1NotFound {

	return &PostFileV1NotFound{}
}

// WithPayload adds the payload to the post file v1 not found response
func (o *PostFileV1NotFound) WithPayload(payload *models.ErrResponse) *PostFileV1NotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post file v1 not found response
func (o *PostFileV1NotFound) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostFileV1NotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostFileV1ConflictCode is the HTTP code returned for type PostFileV1Conflict
const PostFileV1ConflictCode int = 409

/*PostFileV1Conflict Conflict

swagger:response postFileV1Conflict
*/
type PostFileV1Conflict struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewPostFileV1Conflict creates PostFileV1Conflict with default headers values
func NewPostFileV1Conflict() *PostFileV1Conflict {

	return &PostFileV1Conflict{}
}

// WithPayload adds the payload to the post file v1 conflict response
func (o *PostFileV1Conflict) WithPayload(payload *models.ErrResponse) *PostFileV1Conflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post file v1 conflict response
func (o *PostFileV1Conflict) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostFileV1Conflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostFileV1InternalServerErrorCode is the HTTP code returned for type PostFileV1InternalServerError
const PostFileV1InternalServerErrorCode int = 500

/*PostFileV1InternalServerError Internal Server Error

swagger:response postFileV1InternalServerError
*/
type PostFileV1InternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewPostFileV1InternalServerError creates PostFileV1InternalServerError with default headers values
func NewPostFileV1InternalServerError() *PostFileV1InternalServerError {

	return &PostFileV1InternalServerError{}
}

// WithPayload adds the payload to the post file v1 internal server error response
func (o *PostFileV1InternalServerError) WithPayload(payload *models.ErrResponse) *PostFileV1InternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post file v1 internal server error response
func (o *PostFileV1InternalServerError) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostFileV1InternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
