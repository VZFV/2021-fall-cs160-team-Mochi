// Code generated by go-swagger; DO NOT EDIT.

package notes_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"2021-fall-cs160-team-Mochi/backend/source/generated/models"
)

// UpdateNoteOKCode is the HTTP code returned for type UpdateNoteOK
const UpdateNoteOKCode int = 200

/*UpdateNoteOK Success

swagger:response updateNoteOK
*/
type UpdateNoteOK struct {

	/*
	  In: Body
	*/
	Payload *models.NoteDeleteResponse `json:"body,omitempty"`
}

// NewUpdateNoteOK creates UpdateNoteOK with default headers values
func NewUpdateNoteOK() *UpdateNoteOK {

	return &UpdateNoteOK{}
}

// WithPayload adds the payload to the update note o k response
func (o *UpdateNoteOK) WithPayload(payload *models.NoteDeleteResponse) *UpdateNoteOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update note o k response
func (o *UpdateNoteOK) SetPayload(payload *models.NoteDeleteResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateNoteOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateNoteBadRequestCode is the HTTP code returned for type UpdateNoteBadRequest
const UpdateNoteBadRequestCode int = 400

/*UpdateNoteBadRequest Bad Request

swagger:response updateNoteBadRequest
*/
type UpdateNoteBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewUpdateNoteBadRequest creates UpdateNoteBadRequest with default headers values
func NewUpdateNoteBadRequest() *UpdateNoteBadRequest {

	return &UpdateNoteBadRequest{}
}

// WithPayload adds the payload to the update note bad request response
func (o *UpdateNoteBadRequest) WithPayload(payload *models.ErrResponse) *UpdateNoteBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update note bad request response
func (o *UpdateNoteBadRequest) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateNoteBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateNoteUnauthorizedCode is the HTTP code returned for type UpdateNoteUnauthorized
const UpdateNoteUnauthorizedCode int = 401

/*UpdateNoteUnauthorized Unauthorized

swagger:response updateNoteUnauthorized
*/
type UpdateNoteUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewUpdateNoteUnauthorized creates UpdateNoteUnauthorized with default headers values
func NewUpdateNoteUnauthorized() *UpdateNoteUnauthorized {

	return &UpdateNoteUnauthorized{}
}

// WithPayload adds the payload to the update note unauthorized response
func (o *UpdateNoteUnauthorized) WithPayload(payload *models.ErrResponse) *UpdateNoteUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update note unauthorized response
func (o *UpdateNoteUnauthorized) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateNoteUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateNoteForbiddenCode is the HTTP code returned for type UpdateNoteForbidden
const UpdateNoteForbiddenCode int = 403

/*UpdateNoteForbidden Forbidden

swagger:response updateNoteForbidden
*/
type UpdateNoteForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewUpdateNoteForbidden creates UpdateNoteForbidden with default headers values
func NewUpdateNoteForbidden() *UpdateNoteForbidden {

	return &UpdateNoteForbidden{}
}

// WithPayload adds the payload to the update note forbidden response
func (o *UpdateNoteForbidden) WithPayload(payload *models.ErrResponse) *UpdateNoteForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update note forbidden response
func (o *UpdateNoteForbidden) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateNoteForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateNoteNotFoundCode is the HTTP code returned for type UpdateNoteNotFound
const UpdateNoteNotFoundCode int = 404

/*UpdateNoteNotFound Not Found

swagger:response updateNoteNotFound
*/
type UpdateNoteNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewUpdateNoteNotFound creates UpdateNoteNotFound with default headers values
func NewUpdateNoteNotFound() *UpdateNoteNotFound {

	return &UpdateNoteNotFound{}
}

// WithPayload adds the payload to the update note not found response
func (o *UpdateNoteNotFound) WithPayload(payload *models.ErrResponse) *UpdateNoteNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update note not found response
func (o *UpdateNoteNotFound) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateNoteNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateNoteConflictCode is the HTTP code returned for type UpdateNoteConflict
const UpdateNoteConflictCode int = 409

/*UpdateNoteConflict Conflict

swagger:response updateNoteConflict
*/
type UpdateNoteConflict struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewUpdateNoteConflict creates UpdateNoteConflict with default headers values
func NewUpdateNoteConflict() *UpdateNoteConflict {

	return &UpdateNoteConflict{}
}

// WithPayload adds the payload to the update note conflict response
func (o *UpdateNoteConflict) WithPayload(payload *models.ErrResponse) *UpdateNoteConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update note conflict response
func (o *UpdateNoteConflict) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateNoteConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateNoteInternalServerErrorCode is the HTTP code returned for type UpdateNoteInternalServerError
const UpdateNoteInternalServerErrorCode int = 500

/*UpdateNoteInternalServerError Internal Server Error

swagger:response updateNoteInternalServerError
*/
type UpdateNoteInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewUpdateNoteInternalServerError creates UpdateNoteInternalServerError with default headers values
func NewUpdateNoteInternalServerError() *UpdateNoteInternalServerError {

	return &UpdateNoteInternalServerError{}
}

// WithPayload adds the payload to the update note internal server error response
func (o *UpdateNoteInternalServerError) WithPayload(payload *models.ErrResponse) *UpdateNoteInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update note internal server error response
func (o *UpdateNoteInternalServerError) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateNoteInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
