// Code generated by go-swagger; DO NOT EDIT.

package notes_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"2021-fall-cs160-team-Mochi/backend/source/generated/models"
)

// GetFileV1OKCode is the HTTP code returned for type GetFileV1OK
const GetFileV1OKCode int = 200

/*GetFileV1OK Success

swagger:response getFileV1OK
*/
type GetFileV1OK struct {

	/*
	  In: Body
	*/
	Payload *models.GetFileResponse `json:"body,omitempty"`
}

// NewGetFileV1OK creates GetFileV1OK with default headers values
func NewGetFileV1OK() *GetFileV1OK {

	return &GetFileV1OK{}
}

// WithPayload adds the payload to the get file v1 o k response
func (o *GetFileV1OK) WithPayload(payload *models.GetFileResponse) *GetFileV1OK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get file v1 o k response
func (o *GetFileV1OK) SetPayload(payload *models.GetFileResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFileV1OK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetFileV1BadRequestCode is the HTTP code returned for type GetFileV1BadRequest
const GetFileV1BadRequestCode int = 400

/*GetFileV1BadRequest Bad Request

swagger:response getFileV1BadRequest
*/
type GetFileV1BadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewGetFileV1BadRequest creates GetFileV1BadRequest with default headers values
func NewGetFileV1BadRequest() *GetFileV1BadRequest {

	return &GetFileV1BadRequest{}
}

// WithPayload adds the payload to the get file v1 bad request response
func (o *GetFileV1BadRequest) WithPayload(payload *models.ErrResponse) *GetFileV1BadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get file v1 bad request response
func (o *GetFileV1BadRequest) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFileV1BadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetFileV1UnauthorizedCode is the HTTP code returned for type GetFileV1Unauthorized
const GetFileV1UnauthorizedCode int = 401

/*GetFileV1Unauthorized Unauthorized

swagger:response getFileV1Unauthorized
*/
type GetFileV1Unauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewGetFileV1Unauthorized creates GetFileV1Unauthorized with default headers values
func NewGetFileV1Unauthorized() *GetFileV1Unauthorized {

	return &GetFileV1Unauthorized{}
}

// WithPayload adds the payload to the get file v1 unauthorized response
func (o *GetFileV1Unauthorized) WithPayload(payload *models.ErrResponse) *GetFileV1Unauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get file v1 unauthorized response
func (o *GetFileV1Unauthorized) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFileV1Unauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetFileV1ForbiddenCode is the HTTP code returned for type GetFileV1Forbidden
const GetFileV1ForbiddenCode int = 403

/*GetFileV1Forbidden Forbidden

swagger:response getFileV1Forbidden
*/
type GetFileV1Forbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewGetFileV1Forbidden creates GetFileV1Forbidden with default headers values
func NewGetFileV1Forbidden() *GetFileV1Forbidden {

	return &GetFileV1Forbidden{}
}

// WithPayload adds the payload to the get file v1 forbidden response
func (o *GetFileV1Forbidden) WithPayload(payload *models.ErrResponse) *GetFileV1Forbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get file v1 forbidden response
func (o *GetFileV1Forbidden) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFileV1Forbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetFileV1NotFoundCode is the HTTP code returned for type GetFileV1NotFound
const GetFileV1NotFoundCode int = 404

/*GetFileV1NotFound Not Found

swagger:response getFileV1NotFound
*/
type GetFileV1NotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewGetFileV1NotFound creates GetFileV1NotFound with default headers values
func NewGetFileV1NotFound() *GetFileV1NotFound {

	return &GetFileV1NotFound{}
}

// WithPayload adds the payload to the get file v1 not found response
func (o *GetFileV1NotFound) WithPayload(payload *models.ErrResponse) *GetFileV1NotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get file v1 not found response
func (o *GetFileV1NotFound) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFileV1NotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetFileV1ConflictCode is the HTTP code returned for type GetFileV1Conflict
const GetFileV1ConflictCode int = 409

/*GetFileV1Conflict Conflict

swagger:response getFileV1Conflict
*/
type GetFileV1Conflict struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewGetFileV1Conflict creates GetFileV1Conflict with default headers values
func NewGetFileV1Conflict() *GetFileV1Conflict {

	return &GetFileV1Conflict{}
}

// WithPayload adds the payload to the get file v1 conflict response
func (o *GetFileV1Conflict) WithPayload(payload *models.ErrResponse) *GetFileV1Conflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get file v1 conflict response
func (o *GetFileV1Conflict) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFileV1Conflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetFileV1InternalServerErrorCode is the HTTP code returned for type GetFileV1InternalServerError
const GetFileV1InternalServerErrorCode int = 500

/*GetFileV1InternalServerError Internal Server Error

swagger:response getFileV1InternalServerError
*/
type GetFileV1InternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrResponse `json:"body,omitempty"`
}

// NewGetFileV1InternalServerError creates GetFileV1InternalServerError with default headers values
func NewGetFileV1InternalServerError() *GetFileV1InternalServerError {

	return &GetFileV1InternalServerError{}
}

// WithPayload adds the payload to the get file v1 internal server error response
func (o *GetFileV1InternalServerError) WithPayload(payload *models.ErrResponse) *GetFileV1InternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get file v1 internal server error response
func (o *GetFileV1InternalServerError) SetPayload(payload *models.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFileV1InternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
