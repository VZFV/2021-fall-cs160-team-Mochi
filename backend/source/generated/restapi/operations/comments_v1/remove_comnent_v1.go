// Code generated by go-swagger; DO NOT EDIT.

package comments_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RemoveComnentV1HandlerFunc turns a function with the right signature into a remove comnent v1 handler
type RemoveComnentV1HandlerFunc func(RemoveComnentV1Params) middleware.Responder

// Handle executing the request and returning a response
func (fn RemoveComnentV1HandlerFunc) Handle(params RemoveComnentV1Params) middleware.Responder {
	return fn(params)
}

// RemoveComnentV1Handler interface for that can handle valid remove comnent v1 params
type RemoveComnentV1Handler interface {
	Handle(RemoveComnentV1Params) middleware.Responder
}

// NewRemoveComnentV1 creates a new http.Handler for the remove comnent v1 operation
func NewRemoveComnentV1(ctx *middleware.Context, handler RemoveComnentV1Handler) *RemoveComnentV1 {
	return &RemoveComnentV1{Context: ctx, Handler: handler}
}

/* RemoveComnentV1 swagger:route DELETE /v1/comments/{comment_id} commentsV1 removeComnentV1

delete a comment

delete comment

*/
type RemoveComnentV1 struct {
	Context *middleware.Context
	Handler RemoveComnentV1Handler
}

func (o *RemoveComnentV1) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRemoveComnentV1Params()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
