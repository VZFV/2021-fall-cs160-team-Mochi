// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserObject user object
//
// swagger:model userObject
type UserObject struct {

	// description of the user
	Description string `json:"description,omitempty"`

	// email of the user
	Email string `json:"email,omitempty"`

	// first name of the user
	FirstName string `json:"first_name,omitempty"`

	// last name of the user
	LastName string `json:"last_name,omitempty"`

	// middle name of the user
	MiddleName string `json:"middle_name,omitempty"`

	// password of the user
	// Required: true
	Password *string `json:"password"`

	// username of the user
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this user object
func (m *UserObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserObject) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *UserObject) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user object based on context it is used
func (m *UserObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserObject) UnmarshalBinary(b []byte) error {
	var res UserObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
