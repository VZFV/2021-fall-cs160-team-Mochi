// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NoteObject note obj
//
// swagger:model noteObject
type NoteObject struct {

	// note category
	Category string `json:"category,omitempty"`

	// description of the note
	Desc string `json:"desc,omitempty"`

	// the owner of note
	// Required: true
	NoteOwner interface{} `json:"note_owner"`

	// tags of the note
	// Required: true
	Tag *string `json:"tag"`

	// title of the note
	Title string `json:"title,omitempty"`

	// type of the note file
	Type string `json:"type,omitempty"`
}

// Validate validates this note object
func (m *NoteObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNoteOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NoteObject) validateNoteOwner(formats strfmt.Registry) error {

	if m.NoteOwner == nil {
		return errors.Required("note_owner", "body", nil)
	}

	return nil
}

func (m *NoteObject) validateTag(formats strfmt.Registry) error {

	if err := validate.Required("tag", "body", m.Tag); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this note object based on context it is used
func (m *NoteObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NoteObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NoteObject) UnmarshalBinary(b []byte) error {
	var res NoteObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
