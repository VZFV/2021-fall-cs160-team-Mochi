swagger: '2.0'
info:
  description: This is the Public API for MochiNote
  version: 1.0.0
  title: MochiNote

schemes:
- http
- https

paths:
  /v1/login:
    post:
      description: handle login request, username and password
      produces:
        - application/json
      consumes:
        - application/json
      tags:
      - UserMgmtV1
      summary: Sign up or log in
      operationId: loginV1
      parameters:
      - name: Authorization
        description: Bearer token based Authorization
        type: string
        in: header
        required: false
      - name: body
        in: body
        description: user object
        required: true
        schema:
          $ref: '#/definitions/createUserObject'
      - name: signup
        default: false
        type: boolean
        in: query
        description: Do sign up operation if set to true
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/loginResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/errResponse'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errResponse'
        403:
          description: "Forbidden"
          schema:
            $ref: '#/definitions/errResponse'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/errResponse'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/errResponse'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errResponse'
  /v1/user:
    get:
      description: get user info
      produces:
        - application/json
      tags:
      - UserMgmtV1
      summary: Get user info
      operationId: getUserV1
      parameters:
      - name: Authorization
        description: Bearer token based Authorization
        type: string
        in: header
        required: true
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/userObj'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/errResponse'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errResponse'
        403:
          description: "Forbidden"
          schema:
            $ref: '#/definitions/errResponse'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/errResponse'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/errResponse'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errResponse'
    patch:
      description: update user info
      produces:
        - application/json
      consumes:
        - application/json
      tags:
      - UserMgmtV1
      summary: Update user info
      operationId: updateUserInfoV1
      parameters:
      - name: Authorization
        description: Bearer token based Authorization
        type: string
        in: header
        required: true
      - name: body
        description: new user info body
        in: body
        schema:
          $ref: '#/definitions/updateUserObj'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/userObj'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/errResponse'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errResponse'
        403:
          description: "Forbidden"
          schema:
            $ref: '#/definitions/errResponse'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/errResponse'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/errResponse'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errResponse'
  /v1/password/{password}:
    patch:
      description: update password
      produces:
        - application/json
      tags:
      - UserMgmtV1
      summary: Update password
      operationId: updatePasswordV1
      parameters:
      - name: Authorization
        description: Bearer token based Authorization
        type: string
        in: header
        required: true
      - name: password
        description: password
        type: string
        in: path
        required: true
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/userObj'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/errResponse'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errResponse'
        403:
          description: "Forbidden"
          schema:
            $ref: '#/definitions/errResponse'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/errResponse'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/errResponse'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errResponse'

  /v1/notes:
    post:
      description: add note 
      produces:
        - application/json
      consumes:
        - application/json
      tags:
      - notesV1
      summary: add note
      operationId: uploadNoteV1
      parameters:
      - name: Authorization
        description: Bearer token based Authorization
        type: string
        in: header
        required: true
      - name: body
        in: body
        description: note object
        required: true
        schema:
          $ref: '#/definitions/noteObjectRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/noteResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/errResponse'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errResponse'
        403:
          description: "Forbidden"
          schema:
            $ref: '#/definitions/errResponse'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/errResponse'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/errResponse'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errResponse'
  /v1/notes/username:
    get: 
      tags: 
      - notesV1
      summary: find notes by username
      description: one username can be provided to search
      operationId: "findNotesByUsername"
      produces:
        - application/json
      parameters:
        - name: Authorization
          description: Bearer token based Authorization
          type: string
          in: header
          required: true
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/notesGetResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/errResponse'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errResponse'
        403:
          description: "Forbidden"
          schema:
            $ref: '#/definitions/errResponse'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/errResponse'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/errResponse'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errResponse'
  /v1/notes/tag/{tag}:
    get: 
      tags: 
      - notesV1
      summary: find notes by tags
      description: one tag can be provided to search
      operationId: "findNotesByTags"
      produces:
          - application/json
      parameters:
        - name: Authorization
          description: Bearer token based Authorization
          type: string
          in: header
          required: true
        - name: tag
          in: path
          description: tag to filter by
          required: true
          type: string
        - name: type
          description: type of note
          in: query
          type: string
          required: false
        - name: limit
          description: limit of files
          default: 10
          in: query
          type: integer
          required: false
        - name: offset
          description: offset of files
          in: query
          required: false
          default: 0
          type: integer
        - name: updated_at
          description: updated at
          in: query
          required: false
          type: boolean
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/notesGetResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/errResponse'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errResponse'
        403:
          description: "Forbidden"
          schema:
            $ref: '#/definitions/errResponse'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/errResponse'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/errResponse'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errResponse'
  /v1/notes/groupname/{group_name}:
    get: 
      tags: 
      - notesV1
      summary: find notes by Groupname
      description: one groupname can be provided to search
      operationId: "findNotesByGroupname"
      produces:
          - application/json
      parameters:
        - name: Authorization
          description: Bearer token based Authorization
          type: string
          in: header
          required: true
        - name: group_name
          in: path
          description: groupname to filter by
          required: true
          type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/notesGetResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/errResponse'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errResponse'
        403:
          description: "Forbidden"
          schema:
            $ref: '#/definitions/errResponse'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/errResponse'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/errResponse'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errResponse'
  /v1/notes/{id}:
    delete: 
      tags: 
      - notesV1
      summary: delete note
      description: user delete note by title
      operationId: "deleteNote"
      produces:
          - application/json
      parameters:
        - name: Authorization
          description: Bearer token based Authorization
          type: string
          in: header
          required: true
        - name: id
          in: path
          description: title to filter by
          required: true
          type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/noteDeleteResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/errResponse'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errResponse'
        403:
          description: "Forbidden"
          schema:
            $ref: '#/definitions/errResponse'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/errResponse'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/errResponse'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errResponse'
    put: 
      tags: 
      - notesV1
      summary: update note
      description: user update note by id
      operationId: "updateNote"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: Authorization
          description: Bearer token based Authorization
          type: string
          in: header
          required: true
        - name: id
          in: path
          description: title to filter by
          required: true
          type: string
        - name: body
          in: body
          description: note object
          required: true
          schema:
            $ref: '#/definitions/noteObjectRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/noteDeleteResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/errResponse'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errResponse'
        403:
          description: "Forbidden"
          schema:
            $ref: '#/definitions/errResponse'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/errResponse'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/errResponse'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errResponse'
  /v1/notes/{id}/members:
    get:
      description: get members of notes
      produces:
        - application/json
      tags:
      - notesV1
      summary: get members of notes
      operationId: getNoteMembers
      parameters:
        - name: Authorization
          description: Bearer token based Authorization
          type: string
          in: header
          required: true
        - name: id
          in: path
          description: title to filter by
          required: true
          type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/getNoteMembersResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/errResponse'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errResponse'
        403:
          description: "Forbidden"
          schema:
            $ref: '#/definitions/errResponse'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/errResponse'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/errResponse'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errResponse'
  /v1/notes/{note_id}/comments:
    get:
      description: get all comments of a note
      produces:
        - application/json
      tags:
      - notesV1
      summary: get all comments of a note 
      operationId: getNoteComments
      parameters:
        - name: Authorization
          description: Bearer token based Authorization
          type: string
          in: header
          required: true
        - name: note_id
          in: path
          description: note id
          required: true
          type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/noteCommentsResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/errResponse'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errResponse'
        403:
          description: "Forbidden"
          schema:
            $ref: '#/definitions/errResponse'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/errResponse'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/errResponse'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errResponse'
  /v1/notes/file:
    post:
      description: post a pdf file
      consumes:
        - multipart/form-data
      produces:
        - application/json
      tags:
      - notesV1
      summary: post a pdf file
      operationId: postFileV1
      parameters:
      - name: Authorization
        description: Bearer token based Authorization
        type: string
        in: header
        required: true
      - name: noteFile
        description: note file
        in: formData
        type: file
        required: true
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/postFileResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/errResponse'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errResponse'
        403:
          description: "Forbidden"
          schema:
            $ref: '#/definitions/errResponse'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/errResponse'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/errResponse'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errResponse'
  /v1/notes/file/{path}:
    get:
      description: get a pdf file
      produces:
        - application/json
      tags:
      - notesV1
      summary: get a pdf file
      operationId: getFileV1
      parameters:
      - name: Authorization
        description: Bearer token based Authorization
        type: string
        in: header
        required: true
      - name: path
        in: path
        type: string
        description: file path
        required: true
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/getFileResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/errResponse'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errResponse'
        403:
          description: "Forbidden"
          schema:
            $ref: '#/definitions/errResponse'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/errResponse'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/errResponse'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errResponse'
  /v1/notes/files:
    post:
      description: get multiple pdf files
      produces:
        - application/json
      consumes:
        - application/json
      tags:
      - notesV1
      summary: get multiple pdf files
      operationId: getMultipleFilesV1
      parameters:
      - name: Authorization
        description: Bearer token based Authorization
        type: string
        in: header
        required: true
      - name: body
        description: path array
        in: body
        required: true
        schema:
          $ref: '#/definitions/getFilesRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/getFilesResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/errResponse'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errResponse'
        403:
          description: "Forbidden"
          schema:
            $ref: '#/definitions/errResponse'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/errResponse'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/errResponse'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errResponse'

  /v1/comments:
    post:
      description: add comment
      produces:
        - application/json
      consumes:
        - application/json
      tags:
      - commentsV1
      summary: add comment
      operationId: postCommentsV1
      parameters:
      - name: Authorization
        description: Bearer token based Authorization
        type: string
        in: header
        required: true
      - name: body
        in: body
        description: comment object
        required: true
        schema:
          $ref: '#/definitions/commentObjectRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/commentResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/errResponse'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errResponse'
        403:
          description: "Forbidden"
          schema:
            $ref: '#/definitions/errResponse'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/errResponse'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/errResponse'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errResponse'
  /v1/comments/{comment_id}:
    delete:
      description: delete comment
      produces: 
        - application/json      
      tags:
      - commentsV1
      summary: delete a comment
      operationId: removeComnentV1
      parameters:
      - name: Authorization
        description: Bearer token based Authorization
        type: string
        in: header
        required: true
      - name: comment_id
        in: path
        description: comment id
        required: true
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/commentResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/errResponse'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errResponse'
        403:
          description: "Forbidden"
          schema:
            $ref: '#/definitions/errResponse'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/errResponse'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/errResponse'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errResponse'

  /v1/groups:
    post:
      description: create a group
      operationId: createGroupV1
      produces:
        - application/json
      consumes:
        - application/json
      tags:
      - groupsV1
      parameters:
      - name: Authorization
        description: Bearer token based Authorization
        type: string
        in: header
        required: true
      - name: body
        in: body
        description: group object
        required: true
        schema:
          $ref: "#/definitions/postGroupObj"
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/groupResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/errResponse'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errResponse'
        403:
          description: "Forbidden"
          schema:
            $ref: '#/definitions/errResponse'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/errResponse'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/errResponse'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errResponse'
    get:
      description: get all groups
      operationId: getGroupsV1
      produces:
        - application/json
      tags:
      - groupsV1
      parameters:
      - name: Authorization
        description: Bearer token based Authorization
        type: string
        in: header
        required: true
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/getAllGroupsObject'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/errResponse'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errResponse'
        403:
          description: "Forbidden"
          schema:
            $ref: '#/definitions/errResponse'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/errResponse'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/errResponse'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errResponse'
  /v1/groups/{group_id}:
    delete:
      description: delete a group
      operationId: deleteGroupV1
      produces:
        - application/json
      tags:
      - groupsV1
      parameters:
      - name: Authorization
        description: Bearer token based Authorization
        type: string
        in: header
        required: true
      - name: group_id
        type: string
        in: path
        description: group id
        required: true
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/groupResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/errResponse'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errResponse'
        403:
          description: "Forbidden"
          schema:
            $ref: '#/definitions/errResponse'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/errResponse'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/errResponse'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errResponse'
    get:
      description: get a group info
      operationId: getGroupInfoV1
      produces:
        - application/json
      tags:
      - groupsV1
      parameters:
      - name: Authorization
        description: Bearer token based Authorization
        type: string
        in: header
        required: true
      - name: group_id
        type: string
        in: path
        description: group id
        required: true
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/groupObj'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/errResponse'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errResponse'
        403:
          description: "Forbidden"
          schema:
            $ref: '#/definitions/errResponse'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/errResponse'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/errResponse'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errResponse'
  /v1/groups/{group_id}/members:
    get:
      description: get group users
      operationId: getGroupUsersV1
      produces:
        - application/json
      tags:
      - groupsV1
      parameters:
      - name: Authorization
        description: Bearer token based Authorization
        type: string
        in: header
        required: true
      - name: group_id
        type: string
        in: path
        description: group id
        required: true
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/groupMembersObject'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/errResponse'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errResponse'
        403:
          description: "Forbidden"
          schema:
            $ref: '#/definitions/errResponse'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/errResponse'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/errResponse'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errResponse'
    post:
      description: add group users
      operationId: addGroupUsersV1
      produces:
        - application/json
      consumes:
        - application/json
      tags:
      - groupsV1
      parameters:
      - name: Authorization
        description: Bearer token based Authorization
        type: string
        in: header
        required: true
      - name: group_id
        type: string
        in: path
        description: group id
        required: true
      - name: body
        in: body
        description: array of users
        schema:
          $ref: '#/definitions/groupMembers'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/groupResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/errResponse'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errResponse'
        403:
          description: "Forbidden"
          schema:
            $ref: '#/definitions/errResponse'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/errResponse'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/errResponse'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errResponse'
    delete:
      description: remove group users
      operationId: removeGroupUsersV1
      produces:
        - application/json
      consumes:
        - application/json
      tags:
      - groupsV1
      parameters:
      - name: Authorization
        description: Bearer token based Authorization
        type: string
        in: header
        required: true
      - name: group_id
        type: string
        in: path
        description: group id
        required: true
      - name: body
        in: body
        description: array of users
        schema:
          $ref: '#/definitions/groupMembers'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/groupResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/errResponse'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errResponse'
        403:
          description: "Forbidden"
          schema:
            $ref: '#/definitions/errResponse'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/errResponse'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/errResponse'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errResponse'

definitions:
  createUserObject:
    type: object
    required:
    - username
    - password
    properties:
      username: 
        description: username of the user
        type: string
      password:
        description: password of the user
        type: string
      description:
        description: description of the user
        type: string
      first_name: 
        description: first name of the user
        type: string
      middle_name: 
        description: middle name of the user
        type: string
      last_name: 
        description: last name of the user
        type: string
      email: 
        description: email of the user
        type: string
  updateUserObj:
    type: object
    properties:
      description:
        description: description of the user
        type: string
      first_name: 
        description: first name of the user
        type: string
      middle_name: 
        description: middle name of the user
        type: string
      last_name: 
        description: last name of the user
        type: string
      email: 
        description: email of the user
        type: string
  userObj:
    type: object
    properties:
      username: 
        description: username of the user
        type: string
      description:
        description: description of the user
        type: string
      first_name: 
        description: first name of the user
        type: string
      middle_name: 
        description: middle name of the user
        type: string
      last_name: 
        description: last name of the user
        type: string
      email: 
        description: email of the user
  groupUser:
    type: object
    properties:
      username: 
        description: username of the user
        type: string
  groupMembers:
    type: array
    items:
      $ref: '#/definitions/groupUser'
    description: array of group users
  postGroupObj:
    type: object
    properties:
      group_name:
        description: group name
        type: string
      description:
        description: group's desciption
        type: string
      group_owner:
        description: group owner
        type: string
  groupObj:
    type: object
    properties:
      group_id: 
        type: string
        description: group id
      group_name:
        description: group name
        type: string
      description:
        description: group's desciption
        type: string
      group_owner:
        description: group owner
        type: string
  groupMembersObject:
    type: array
    items:
      $ref: '#/definitions/userObj'
    description: array of group users
  getAllGroupsObject:
    type: array
    items:
      $ref: '#/definitions/groupObj'
    description: array of groups by username
  groupResponse: 
    type: object
    properties:
      group_id:
        type: string
        description: group_id
  noteObjectRequest:
    description: note obj
    required:
    - tag
    - type
    - note_reference
    properties:
      description:
        description: description of the note
        type: string
      title:
        description: title of the note
        type: string
      content: 
        description: note content
        type: string
      type: 
        description: type of the note file, public, shared, private
        type: string
      tag: 
        description: tags of the note
        type: string
      note_reference:
        description: path of file
        type: string
  noteObjectResponse: 
    description: note obj response
    properties:
      note_owner:
        description: owner of the note
        type: string
      description:
        description: description of the note
        type: string
      title:
        description: title of the note
        type: string
      content: 
        description: note content
        type: string
      type: 
        description: type of the note file, public, shared, private
        type: string
      tag: 
        description: tags of the note
        type: string
      note_reference:
        description: path of file
        type: string
  noteCommentsResponse:
    type: object
    properties:
      comments:
        type: array
        items:
          $ref: "#/definitions/commentObject"
        description: array of comments of a note
  commentObject:
    type: object
    required:
    - username
    - note_id
    - content
    properties:
      note_id: 
        description: the note corresponding to comment_id
        type: string
      content:
        description: content of the comment
        type: string
      username:
        description: user who submit the comment
        type: string
  commentObjectRequest:
    type: object
    required:
    - note_id
    - content
    properties:
      note_id: 
        description: the note corresponding to comment_id
        type: string
      content:
        description: content of the comment
        type: string
  loginResponse:
    type: object
    properties:
      username:
        description: username of the user
        type: string
      token:
        description: jwt
        type: string
  notesGetResponse:
    type: object
    properties:
      notes:
        type: array
        items: 
          $ref: "#/definitions/noteObjectResponse"
    description: array of note
  noteResponse:
    type: object
    properties:
      note_id:
        description: note id
        type: string
  noteDeleteResponse:
    type: object
    properties:
      note_id:
        description: id of note
        type: string
  getNoteMembersResponse:
    type: object
    properties:
      users: 
        type: array
        items:
          $ref: '#/definitions/userObj'
      groups:
        type: array
        items: 
          $ref: '#/definitions/groupObj'
  commentResponse:
    type: object
    properties:
      comment_id: 
        description: the note corresponding to comment_id
        type: string
  errResponse:
    type: object
    properties:
      errMessage:
        description: error message
        type: string
      status_code:
        description: http error code
        type: integer
        format: int32
  postFileResponse:
    type: object
    properties:
      note_reference:
        description: path of file
        type: string
  getFileResponse:
    type: object
    properties:
      pdf_data:
        type: object
        description: pdf content
  getFilesResponse:
    type: object
    properties:
      filesData:
        type: array
        items:
          $ref: '#/definitions/getFileResponse'
        description: files data array
      count:
        type: integer
        format: int32
        description: count of files
  getFileRequest:
    type: object
    properties:
      path:
        type: string
        description: path of file
  getFilesRequest:
    type: object
    properties:
      filePaths:
        type: array
        items:
          $ref: '#/definitions/getFileRequest'
        description: file paths array